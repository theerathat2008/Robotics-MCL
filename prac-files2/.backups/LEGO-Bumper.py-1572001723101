import brickpi3
import math
import time

BP = brickpi3.BrickPi3()
d = 5.7 # This is the diameter of the tyretyre_distance
turnConstant = 3.4
FULL_REVOLUTION = 360

BP.set_motor_limits(BP.PORT_B, 70, 720)
BP.set_motor_limits(BP.PORT_C, 70, 720)

def moveForward(distance, last):
    revolution = distance * FULL_REVOLUTION / (d * math.pi)
    BP.set_motor_position(BP.PORT_B, revolution)
    BP.set_motor_position(BP.PORT_C, revolution)

    while(True):
        currentRevolution = BP.get_motor_status(BP.PORT_B)[2]
        if (currentRevolution > revolution - 5):
            break;

    if (not last):
        resetEncoder()

def moveBackwords(distance, last):
    revolution = distance * FULL_REVOLUTION / (d * math.pi)
    BP.set_motor_position(BP.PORT_B, -revolution)
    BP.set_motor_position(BP.PORT_C, -revolution)

    while(True):
        currentRevolution = -BP.get_motor_status(BP.PORT_C)[2]
        if (currentRevolution > revolution - 5):
            break;

    if (not last):
        resetEncoder()

def turnLeft(angle, last):
    degree = angle * turnConstant

    BP.set_motor_position(BP.PORT_B, -degree)
    BP.set_motor_position(BP.PORT_C, degree)

    while(True):
        currentRevolution = BP.get_motor_status(BP.PORT_C)[2]
        if (currentRevolution > degree - 5):
            break;

    if (not last):
        resetEncoder()

def turnRight(angle, last):
    degree = angle * turnConstant

    BP.set_motor_position(BP.PORT_B, degree)
    BP.set_motor_position(BP.PORT_C, -degree)
    
    while(True):
        currentRevolution = BP.get_motor_status(BP.PORT_B)[2]
        if (currentRevolution > degree - 5):
            break;

    if (not last):
        resetEncoder()

def resetEncoder():
    BP.offset_motor_encoder(BP.PORT_B, BP.get_motor_encoder(BP.PORT_B))
    BP.offset_motor_encoder(BP.PORT_C, BP.get_motor_encoder(BP.PORT_C))

try:
    resetEncoder()
    moveForward(40, False)
    moveBackwords(40, False)
    turnRight(90, False)
    turnLeft(90, True)

except KeyboardInterrupt:
    BP.reset_all()
