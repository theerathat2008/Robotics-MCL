import math
import statistics
import time
from queue import Queue

import brickpi333 as brickpi3

class Robot:
    BP = brickpi3.BrickPi333()
    d = 5.7
    TURN_CONSTANT = 3
    FULL_REVOLUTION = 360
    leftWheel = None
    rightWheel = None

    def __init__(self, leftWheel, rightWheel):
        if leftWheel == "A":
            self.leftWheel = self.BP.PORT_A
        elif leftWheel == "B":
            self.leftWheel = self.BP.PORT_B
        elif leftWheel == "C":
            self.leftWheel = self.BP.PORT_C
        else:
            self.leftWheel = self.BP.PORT_D

        if rightWheel == "A":
            self.rightWheel = self.BP.PORT_A
        elif rightWheel == "B":
            self.rightWheel = self.BP.PORT_B
        elif rightWheel == "C":
            self.rightWheel = self.BP.PORT_C
        else:
            self.rightWheel = self.BP.PORT_D

        # Set sensors
        self.__initialiseSensor()

    def moveForward(self, distance):
        self.resetEncoder()
        expectedPosition = (distance * self.FULL_REVOLUTION / (self.d * math.pi)) + 15
        leftPosition = self.BP.get_motor_status(self.leftWheel)[2]
        rightPosition = self.BP.get_motor_status(self.rightWheel)[2]

        self.BP.set_motor_position(self.leftWheel, expectedPosition)
        self.BP.set_motor_position(self.rightWheel, expectedPosition)

        while (leftPosition < expectedPosition - 5 or rightPosition < expectedPosition - 5):
            leftPosition = self.BP.get_motor_status(self.leftWheel)[2]
            rightPosition = self.BP.get_motor_status(self.rightWheel)[2]
            time.sleep(0.02)

    def moveBackwards(self, distance):
        self.resetEncoder()
        expectedPosition = -distance * self.FULL_REVOLUTION / (self.d * math.pi)
        leftPosition = self.BP.get_motor_status(self.leftWheel)[2]
        rightPosition = self.BP.get_motor_status(self.rightWheel)[2]

        self.BP.set_motor_position(self.leftWheel, expectedPosition)
        self.BP.set_motor_position(self.rightWheel, expectedPosition)

        while (leftPosition > expectedPosition + 0.5 or rightPosition > expectedPosition - 0.5):
            leftPosition = self.BP.get_motor_status(self.leftWheel)[2]
            rightPosition = self.BP.get_motor_status(self.rightWheel)[2]
            time.sleep(0.02)

    def turnLeft(self, angle):
        self.resetEncoder()

        expectedPosition = angle * self.TURN_CONSTANT

        rightPosition = self.BP.get_motor_status(self.rightWheel)[2]
        leftPosition = self.BP.get_motor_status(self.leftWheel)[2]

        self.BP.set_motor_position(self.leftWheel, -expectedPosition)
        self.BP.set_motor_position(self.rightWheel, expectedPosition)

        while (leftPosition > -expectedPosition + 5 or rightPosition < expectedPosition - 5):
            rightPosition = self.BP.get_motor_status(self.rightWheel)[2]
            leftPosition = self.BP.get_motor_status(self.leftWheel)[2]
            time.sleep(0.02)

    def turnRight(self, angle):
        self.resetEncoder()

        expectedPosition = angle * self.TURN_CONSTANT

        rightPosition = -self.BP.get_motor_status(self.rightWheel)[2]
        leftPosition = self.BP.get_motor_status(self.leftWheel)[2]

        self.BP.set_motor_position(self.leftWheel, expectedPosition)
        self.BP.set_motor_position(self.rightWheel, -expectedPosition)

        while (leftPosition < expectedPosition - 5 and rightPosition > expectedPosition + 5):
            rightPosition = self.BP.get_motor_status(self.rightWheel)[2]
            leftPosition = self.BP.get_motor_status(self.leftWheel)[2]
            time.sleep(0.02)

    def speedForward(self):
        self.BP.set_motor_dps(self.BP.PORT_B, self.FULL_REVOLUTION)
        self.BP.set_motor_dps(self.BP.PORT_C, self.FULL_REVOLUTION)

    def stop(self):
        self.BP.set_motor_dps(self.leftWheel, 0)
        self.BP.set_motor_dps(self.rightWheel, 0)

    def resetEncoder(self):
        self.BP.offset_motor_encoder(self.leftWheel, self.BP.get_motor_encoder(self.leftWheel))
        self.BP.offset_motor_encoder(self.rightWheel, self.BP.get_motor_encoder(self.rightWheel))

    def setMotorLimits(self, power, velocity):
        self.BP.set_motor_limits(self.leftWheel, power + 1.25, velocity)
        self.BP.set_motor_limits(self.rightWheel, power, velocity)

    def speedVelocity(self, velocity):
        self.BP.set_motor_dps(self.leftWheel, velocity)
        self.BP.set_motor_dps(self.rightWheel, velocity)

    def speedVelocity(self, leftVelocity, rightVelocity):
        self.BP.set_motor_dps(self.leftWheel, leftVelocity)
        self.BP.set_motor_dps(self.rightWheel, rightVelocity)

    def __initialiseSensor(self):
        self.BP.set_sensor_type(self.BP.PORT_1, self.BP.SENSOR_TYPE.NXT_ULTRASONIC)
        time.sleep(1)

    def getDistance(self):
        readings = Queue(3)

        # Get sensor readings
        for i in range(3):
            try:
                readings.put(self.BP.get_sensor(self.BP.PORT_1))
            except brickpi3.SensorError as error:
                print(error)

        # Take the median
        median = statistics.median(list(readings.queue))

        return median

    def resetAll(self):
        self.BP.reset_all()